#!/bin/bash
#
# MIT License
#
# Copyright (c) 2025 buty4649
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

if ! type -p fzf > /dev/null; then
  echo -e "\033[31mfzf is not installed\033[0m"
  exit 1
fi

GIT_FZF_SELECT_KEY_BINDINGS=`cat <<_BINDING_
ctrl-a:select-all
ctrl-x:deselect-all
ctrl-d:preview-page-down
ctrl-u:preview-page-up
_BINDING_`

GIT_FZF_PREVIEW_KEY_BINDINGS=`cat <<_BINDING_
down,j:down
up,k:up
ctrl-j:preview-down
ctrl-k:preview-up
ctrl-d:preview-page-down
ctrl-u:preview-page-up
q,ctrl-c:abort
_BINDING_`

GIT_FZF_HEIGHT_OPTS=${GIT_FZF_HEIGHT_OPTS:=--tmux center,100%,80%}
GIT_FZF_DEFAULT_OPTS=${GIT_FZF_DEFAULT_OPTS:=--ansi --no-sort --style=full --layout=reverse $GIT_FZF_HEIGHT_OPTS}

GIT_FZF_FILE_PREVIEW_COMMAND=${GIT_FZF_FILE_PREVIEW_COMMAND:-"bat -f --style=numbers"}
GIT_FZF_DIFF_COMMAND=${GIT_FZF_DIFF_COMMAND:-"git diff --color"}

_fzf() {
  local preview_command="$1"
  local opts="$GIT_FZF_DEFAULT_OPTS"

  [[ -n $EXTRA_OPTS ]] && opts="$opts $EXTRA_OPTS"
  [[ -n $FILTER ]] && opts="$opts --filter '$FILTER'"
  [[ -n $BINDING ]] && opts="$opts $(awk '{print "--bind",$0}' <<<"$BINDING")"

  SHELL=/bin/bash fzf $opts --preview "$preview_command"
}

_preview() {
  local opts=""
  [[ -z $ENABLE_INPUT ]] && opts="$opts --disabled --no-input"

  BINDING="$GIT_FZF_PREVIEW_KEY_BINDINGS" \
  EXTRA_OPTS="$EXTRA_OPTS $opts" \
  _fzf "$1"
}

_preview_select() {
  BINDING="$GIT_FZF_SELECT_KEY_BINDINGS" EXTRA_OPTS="$EXTRA_OPTS --select-1" _fzf "$1"
}

_preview_multi_select() {
  BINDING="$GIT_FZF_SELECT_KEY_BINDINGS" EXTRA_OPTS="$EXTRA_OPTS --multi" _fzf "$1"
}

_diff() {
  git -c color.status=always status --short | $* '
    line=$(tr -d "$'\''" <<<"{}")
    if [[ $line =~ ^(\?\?|A) ]]; then
      '"$GIT_FZF_FILE_PREVIEW_COMMAND"' {-1}
    else
      cached=$([[ $line =~ ^M ]] && echo --cached)
      git diff $cached {-1} | '"$GIT_FZF_FILE_PREVIEW_COMMAND"'
    fi
  '
}

fzf_add() {
  _diff _preview_multi_select | awk '{print $NF}' | xargs -r git add -v
}

fzf_log() {
  local pretty='format:%C(auto)%h %s'
  if [[ -n "$*" ]]; then
    git log --pretty="$pretty" --color "$*"
  else
    git log --pretty="$pretty" --color
  fi | ENABLE_INPUT=y _preview 'git log -p {1} -n1 --color --decorate --stat \
                --pretty="format:%C(auto)commit: %H%nref: %D%nauthor: %an <%ae>%ndate: %ad%n"'
}

fzf_ls_files() {
  git ls-files | ENABLE_INPUT=y _preview "$GIT_FZF_FILE_PREVIEW_COMMAND {1}"
}

fzf_restore() {
  _diff _preview_multi_select | awk '{print $NF}' | xargs -r -x git restore
}

fzf_commit_fixup() {
  if git diff --cached --quiet; then
    warn "No staged changes found"
    exit 1
  fi

  default_branch="$(git branch | awk '$NF~/master|main/{print $NF}')"
  EXTRA_OPTS="--accept-nth {1}" fzf_log ${default_branch}..$(git branch --show-current) |
    xargs -r -x git commit --fixup
}

fzf_diff() {
  _diff _preview
}

fzf_switch() {
  git branch --sort=-committerdate | grep -v '^\*' | fzf -1 | xargs -r git switch
}

warn() {
  echo -en "\033[31m" >&2
  echo "$*" >&2
  echo -en "\033[0m" >&2
}

ACTION=$1; shift
case $ACTION in
  add) fzf_add ;;
  commit-fixup) fzf_commit_fixup ;;
  diff) fzf_diff ;;
  log) fzf_log > /dev/null ;;
  ls-files) fzf_ls_files > /dev/null ;;
  restore) fzf_restore ;;
  switch) fzf_switch ;;
  *)
    warn "Invalid action"
    exit 1
    ;;
esac
